"""
Django settings for basketball_analytics project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Ensure logs directory exists
LOG_DIR = BASE_DIR / "logs"
os.makedirs(LOG_DIR, exist_ok=True)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-dtwsg0k&uxi9z6hpr!*2bw8g(92t_ohu=#@&$lc_wb-342p#m("

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "django_filters",
    "drf_spectacular",
    # Our apps
    "apps.users.apps.UsersConfig",
    "apps.teams.apps.TeamsConfig",
    "apps.plays.apps.PlaysConfig",
    "apps.possessions.apps.PossessionsConfig",
    "apps.competitions.apps.CompetitionsConfig",
    "apps.games.apps.GamesConfig",
    "apps.events.apps.EventsConfig",
    "apps.scouting.apps.ScoutingConfig",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Custom logging middlewares
    "basketball_analytics.middleware.ExceptionLoggingMiddleware",
    "basketball_analytics.middleware.RequestLoggingMiddleware",
    "basketball_analytics.middleware.SlowQueryLoggingMiddleware",
]

ROOT_URLCONF = "basketball_analytics.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "basketball_analytics.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "users.User"

# Add this section at the bottom of the file
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",  # Example for a standard frontend dev server
    "http://127.0.0.1:8080",
    "http://localhost:3000",  # React dev server
    "http://127.0.0.1:3000",
    "http://localhost:5173",  # Vite dev server
    "http://127.0.0.1:5173",
]

CORS_ALLOW_ALL_ORIGINS = True  # For development only

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = [
    "accept",
    "authorization",
    "content-type",
    "origin",
    "x-requested-with",
    "x-csrftoken",
]

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
}

# Centralized logging configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(asctime)s | %(levelname)s | %(name)s | %(process)d | %(thread)d | %(message)s",
        },
        "concise": {
            "format": "%(levelname)s %(name)s: %(message)s",
        },
        "request": {
            "format": "%(asctime)s | %(levelname)s | %(name)s | method=%(method)s path=%(path)s user=%(user)s status=%(status)s duration_ms=%(duration_ms)s ip=%(ip)s ua=%(ua)s referer=%(referer)s origin=%(origin)s req_id=%(request_id)s",
        },
        "slow_query": {
            "format": "%(asctime)s | %(levelname)s | %(name)s | duration_ms=%(duration_ms)s sql=%(sql)s params=%(params)s",
        },
        "json": {
            "()": "basketball_analytics.logging_formatters.JsonFormatter",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "json",
        },
        "request_console": {
            "class": "logging.StreamHandler",
            "formatter": "json",
        },
        "slow_query_console": {
            "class": "logging.StreamHandler",
            "formatter": "json",
        },
        "request_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": str(LOG_DIR / "requests.log"),
            "maxBytes": 5 * 1024 * 1024,
            "backupCount": 3,
            "formatter": "json",
        },
        "app_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": str(LOG_DIR / "app.log"),
            "maxBytes": 5 * 1024 * 1024,
            "backupCount": 3,
            "formatter": "json",
        },
        "slow_query_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": str(LOG_DIR / "slow_queries.log"),
            "maxBytes": 5 * 1024 * 1024,
            "backupCount": 3,
            "formatter": "json",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console", "app_file"],
            "level": "WARNING",  # Changed from INFO to WARNING
            "propagate": True,
        },
        "django.request": {
            "handlers": ["console", "app_file"],
            "level": "WARNING",
            "propagate": False,
        },
        "app": {
            "handlers": ["console", "app_file"],
            "level": "WARNING",  # Changed from INFO to WARNING
            "propagate": False,
        },
        "request": {
            "handlers": ["request_console", "request_file"],
            "level": "WARNING",  # Changed from INFO to WARNING
            "propagate": False,
        },
        "db.slow": {
            "handlers": ["slow_query_console", "slow_query_file"],
            "level": "WARNING",  # Changed from INFO to WARNING
            "propagate": False,
        },
    },
}

# Slow query threshold in milliseconds
SLOW_QUERY_MS = 100  # tuned threshold

# Media files (uploads)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
